GPS spoofing is the act of transmitting false GPS signals to convince GPS recievers they are in another position.
Given the distance from GPS satellites to recievers, it is very easy to overpower genuine signals with spoofed ones.
With the proliferation of Software Defined radios, these attacks have become increasingly common.

They pose a particular issue to the Air Force, with the reliance of aircraft on GPS for navigation and timing.
Iran has been one of our adversaries to make use of this technology, in an attempt to direct our air and sea craft into their territory to justify siezure.

Many solutions to GPS spoofing involve specifically tailored hardware for each system, which becomes costly and difficult to integrate across our fleet.

The MIL-STD-1553 communications bus is the primary way avionics components communicate with each other on our air and space craft, but is succeptible particularly because it assumes trust between all components.
However, implementing a bus monitor may be an easy and effective solution to combat GPS spoofing.


##########
For this project, I addressed the problem of a lack of lightweight and flexible solutions to detect GPS spoofing across a variety of aircraft types and models.
I hypothesize that a MIL-STD-1553 bus monitor with a trained machine learning model could effectively detect GPS spoofing using the data from messages passed over the bus.

In addition, it is of interest what model may be most effective in classifying this data. This will be primarly measured through Recall, which prioritizes True Positive Rate over False Negative Rate, because we would
rather falsely trigger an alarm of spoofing and switch to another means of navigation than continue relying on GPS and wander into enemy territory or deliver ordinance on the wrong target.

##########
The data that was used to train and test the model was generated by 2d Lt Marvin for his thesis that attempted to use a deep learning model to solve the same problem. It is from the Air Force Research Lab's Avionics Vulnerability
Assesment System, or AVAS. AVAS generates 1553 messages using a flight simulator and sends them across the bus to their Vampire FPGA, which converts the messages into UDP packets for collection.
The data was generated from multiple hours flying the simulator, with a variety of spoofing attacks, seen in the table. The attacks vary in their drift from the true position, and one attack holds the position of 
the aircraft in place.


Once the data was recorded, it was parsed from each message into more useful data, namely the 13 features that were collected, 3 of which were succeptible to the attack.
Messages which were not related to these features were discarded. The data was then downsampled by averaging every 50 observations, so that each observation is representative of 3 seconds of flight time.
Finally, every observation was scaled to represent a value between 0 and 1, as each flight contained approximately 700,000 observations after downsampling, and this cut down on run time.

##########
The data was run through 3 different binary classification models. Logistic regression with 5-fold cross validation, Gaussian Naive Bayes, and Random Forests with 100 trees.
All of the models were evaluated on their performance on each attack individually as well as on all of the data combined. They were trained on 80% of the data and tested on the remaining 20%.
The models were also tested when trained on all but one attack and tested using the unseen attack. This broke down into a training and test set split of approximately 80 and 20% respectively as well.
The metrics used to evaluate the models were precision, recall, and F1 score, which attempts to balance the former two metrics. However, the focus was on recall.

##########
As you can see in the tabulated results on the right, for the extreme scenario of a fixed position attack, as well as very drastic drift rates, all of the models performed extremely well.
However, with more subtle attacks Logistic Regression and Naive Bayes quickly dropped off in their performance.
Random Forests provided perfect results every time across each scenario.

With unseen attacks, the results were very different. Without seeing the fixed position attack, Random Forests severely underperformed, while Naive Bayes did fairly well.
But, when the unseen attack was just a more subtle drift rate, Random Forests greatly outperformed the other two models again.

##########
The key takeaways from these results are that an attack that the model has not seen before will likely not be caught.
As could be expected, more sublte attacks are more difficult to detect.
Nonetheless, a well trained model, particularly random forests, is extremely effective in detecting a spoofing attack. Therefore, a MIL-STD-1553 bus monitor that implements a trained, random forest model
can provide a flexible solution to GPS spoofing across a number of air force assets.

When compared with Lt Marvin's results using a multivariate long short term fully convolutional network, the random forest classifier performs marginally better. But, it is worth noting that random forests is
far less computationally intensive and may provide a better solution.

##########
In order to improve upon these results, and as part of my thesis, the following revisions will be made:
Most importantly, more realistic data will be generated using better flight models, and particularly implementing much more subtle spoofing attacks.
There is also interest in testing the model on real flight data, to verify the portability from the simulator.
Also, unsupervised learning methods will be tested to see if other relationships between the features that come across the MIL-STD-1553 bus may prove useful in detecting a spoofing attack.

Thank you.